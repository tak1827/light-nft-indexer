// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: service/holder.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HolderClient is the client API for Holder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HolderClient interface {
	ListHolderNftToken(ctx context.Context, in *ListHolderNftTokenRequest, opts ...grpc.CallOption) (*ListHolderNftTokenResponse, error)
	ListHolderAllNftToken(ctx context.Context, in *ListHolderAllNftTokenRequest, opts ...grpc.CallOption) (*ListHolderAllNftTokenResponse, error)
}

type holderClient struct {
	cc grpc.ClientConnInterface
}

func NewHolderClient(cc grpc.ClientConnInterface) HolderClient {
	return &holderClient{cc}
}

func (c *holderClient) ListHolderNftToken(ctx context.Context, in *ListHolderNftTokenRequest, opts ...grpc.CallOption) (*ListHolderNftTokenResponse, error) {
	out := new(ListHolderNftTokenResponse)
	err := c.cc.Invoke(ctx, "/tak1827.lightnftindexer.service.Holder/ListHolderNftToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holderClient) ListHolderAllNftToken(ctx context.Context, in *ListHolderAllNftTokenRequest, opts ...grpc.CallOption) (*ListHolderAllNftTokenResponse, error) {
	out := new(ListHolderAllNftTokenResponse)
	err := c.cc.Invoke(ctx, "/tak1827.lightnftindexer.service.Holder/ListHolderAllNftToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HolderServer is the server API for Holder service.
// All implementations should embed UnimplementedHolderServer
// for forward compatibility
type HolderServer interface {
	ListHolderNftToken(context.Context, *ListHolderNftTokenRequest) (*ListHolderNftTokenResponse, error)
	ListHolderAllNftToken(context.Context, *ListHolderAllNftTokenRequest) (*ListHolderAllNftTokenResponse, error)
}

// UnimplementedHolderServer should be embedded to have forward compatible implementations.
type UnimplementedHolderServer struct {
}

func (UnimplementedHolderServer) ListHolderNftToken(context.Context, *ListHolderNftTokenRequest) (*ListHolderNftTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHolderNftToken not implemented")
}
func (UnimplementedHolderServer) ListHolderAllNftToken(context.Context, *ListHolderAllNftTokenRequest) (*ListHolderAllNftTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHolderAllNftToken not implemented")
}

// UnsafeHolderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HolderServer will
// result in compilation errors.
type UnsafeHolderServer interface {
	mustEmbedUnimplementedHolderServer()
}

func RegisterHolderServer(s grpc.ServiceRegistrar, srv HolderServer) {
	s.RegisterService(&Holder_ServiceDesc, srv)
}

func _Holder_ListHolderNftToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHolderNftTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HolderServer).ListHolderNftToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tak1827.lightnftindexer.service.Holder/ListHolderNftToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HolderServer).ListHolderNftToken(ctx, req.(*ListHolderNftTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Holder_ListHolderAllNftToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHolderAllNftTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HolderServer).ListHolderAllNftToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tak1827.lightnftindexer.service.Holder/ListHolderAllNftToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HolderServer).ListHolderAllNftToken(ctx, req.(*ListHolderAllNftTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Holder_ServiceDesc is the grpc.ServiceDesc for Holder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Holder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tak1827.lightnftindexer.service.Holder",
	HandlerType: (*HolderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListHolderNftToken",
			Handler:    _Holder_ListHolderNftToken_Handler,
		},
		{
			MethodName: "ListHolderAllNftToken",
			Handler:    _Holder_ListHolderAllNftToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/holder.proto",
}
