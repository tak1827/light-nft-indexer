// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.1
// source: service/holder.proto

package service

import (
	data "github.com/tak1827/light-nft-indexer/data"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListHolderNftTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletAddress   string `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	ContractAddress string `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (x *ListHolderNftTokenRequest) Reset() {
	*x = ListHolderNftTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_holder_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHolderNftTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHolderNftTokenRequest) ProtoMessage() {}

func (x *ListHolderNftTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_holder_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHolderNftTokenRequest.ProtoReflect.Descriptor instead.
func (*ListHolderNftTokenRequest) Descriptor() ([]byte, []int) {
	return file_service_holder_proto_rawDescGZIP(), []int{0}
}

func (x *ListHolderNftTokenRequest) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *ListHolderNftTokenRequest) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

type ListHolderNftTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NftContract *data.NFTContract `protobuf:"bytes,1,opt,name=nft_contract,json=nftContract,proto3" json:"nft_contract,omitempty"`
	Tokens      []*TokenMini      `protobuf:"bytes,2,rep,name=tokens,proto3" json:"tokens,omitempty"`
}

func (x *ListHolderNftTokenResponse) Reset() {
	*x = ListHolderNftTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_holder_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHolderNftTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHolderNftTokenResponse) ProtoMessage() {}

func (x *ListHolderNftTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_holder_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHolderNftTokenResponse.ProtoReflect.Descriptor instead.
func (*ListHolderNftTokenResponse) Descriptor() ([]byte, []int) {
	return file_service_holder_proto_rawDescGZIP(), []int{1}
}

func (x *ListHolderNftTokenResponse) GetNftContract() *data.NFTContract {
	if x != nil {
		return x.NftContract
	}
	return nil
}

func (x *ListHolderNftTokenResponse) GetTokens() []*TokenMini {
	if x != nil {
		return x.Tokens
	}
	return nil
}

type ListHolderAllNftTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletAddress string `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
}

func (x *ListHolderAllNftTokenRequest) Reset() {
	*x = ListHolderAllNftTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_holder_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHolderAllNftTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHolderAllNftTokenRequest) ProtoMessage() {}

func (x *ListHolderAllNftTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_holder_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHolderAllNftTokenRequest.ProtoReflect.Descriptor instead.
func (*ListHolderAllNftTokenRequest) Descriptor() ([]byte, []int) {
	return file_service_holder_proto_rawDescGZIP(), []int{2}
}

func (x *ListHolderAllNftTokenRequest) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

type ListHolderAllNftTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NftContracts []*ContractWithToken `protobuf:"bytes,1,rep,name=nft_contracts,json=nftContracts,proto3" json:"nft_contracts,omitempty"`
}

func (x *ListHolderAllNftTokenResponse) Reset() {
	*x = ListHolderAllNftTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_holder_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHolderAllNftTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHolderAllNftTokenResponse) ProtoMessage() {}

func (x *ListHolderAllNftTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_holder_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHolderAllNftTokenResponse.ProtoReflect.Descriptor instead.
func (*ListHolderAllNftTokenResponse) Descriptor() ([]byte, []int) {
	return file_service_holder_proto_rawDescGZIP(), []int{3}
}

func (x *ListHolderAllNftTokenResponse) GetNftContracts() []*ContractWithToken {
	if x != nil {
		return x.NftContracts
	}
	return nil
}

type ContractWithToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NftContract *data.NFTContract `protobuf:"bytes,1,opt,name=nft_contract,json=nftContract,proto3" json:"nft_contract,omitempty"`
	Tokens      []*TokenMini      `protobuf:"bytes,2,rep,name=tokens,proto3" json:"tokens,omitempty"`
}

func (x *ContractWithToken) Reset() {
	*x = ContractWithToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_holder_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractWithToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractWithToken) ProtoMessage() {}

func (x *ContractWithToken) ProtoReflect() protoreflect.Message {
	mi := &file_service_holder_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractWithToken.ProtoReflect.Descriptor instead.
func (*ContractWithToken) Descriptor() ([]byte, []int) {
	return file_service_holder_proto_rawDescGZIP(), []int{4}
}

func (x *ContractWithToken) GetNftContract() *data.NFTContract {
	if x != nil {
		return x.NftContract
	}
	return nil
}

func (x *ContractWithToken) GetTokens() []*TokenMini {
	if x != nil {
		return x.Tokens
	}
	return nil
}

var File_service_holder_proto protoreflect.FileDescriptor

var file_service_holder_proto_rawDesc = []byte{
	0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x74, 0x61, 0x6b, 0x31, 0x38, 0x32, 0x37, 0x2e,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x66, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x6e, 0x66, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6e,
	0x66, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6d, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x66, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x66, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x6e, 0x66, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74,
	0x61, 0x6b, 0x31, 0x38, 0x32, 0x37, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x66, 0x74, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4e, 0x46, 0x54, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x0b, 0x6e, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x12, 0x42, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x61, 0x6b, 0x31, 0x38, 0x32, 0x37, 0x2e, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x6e, 0x66, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x69, 0x6e, 0x69,
	0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0x45, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x4e, 0x66, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x78, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x41, 0x6c, 0x6c,
	0x4e, 0x66, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x57, 0x0a, 0x0d, 0x6e, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x74, 0x61, 0x6b, 0x31, 0x38, 0x32,
	0x37, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x66, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65,
	0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x57, 0x69, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0c, 0x6e, 0x66, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x11, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x57, 0x69, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x4c, 0x0a, 0x0c, 0x6e, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x61, 0x6b, 0x31, 0x38, 0x32, 0x37, 0x2e,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x66, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x4e, 0x46, 0x54, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x52, 0x0b, 0x6e, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x42, 0x0a,
	0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x74, 0x61, 0x6b, 0x31, 0x38, 0x32, 0x37, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x66, 0x74,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x69, 0x6e, 0x69, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x32, 0x8e, 0x03, 0x0a, 0x06, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0xc5, 0x01, 0x0a,
	0x12, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x66, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x3a, 0x2e, 0x74, 0x61, 0x6b, 0x31, 0x38, 0x32, 0x37, 0x2e, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x6e, 0x66, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x4e, 0x66, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3b, 0x2e, 0x74, 0x61, 0x6b, 0x31, 0x38, 0x32, 0x37, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e,
	0x66, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x66, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x2f, 0x7b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x7d, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x7d, 0x12, 0xbb, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x4e, 0x66, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3d,
	0x2e, 0x74, 0x61, 0x6b, 0x31, 0x38, 0x32, 0x37, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x66,
	0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x4e, 0x66,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e,
	0x74, 0x61, 0x6b, 0x31, 0x38, 0x32, 0x37, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x66, 0x74,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x4e, 0x66, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x2f, 0x7b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x7d, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x74, 0x61, 0x6b, 0x31, 0x38, 0x32, 0x37, 0x2f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x2d, 0x6e,
	0x66, 0x74, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_holder_proto_rawDescOnce sync.Once
	file_service_holder_proto_rawDescData = file_service_holder_proto_rawDesc
)

func file_service_holder_proto_rawDescGZIP() []byte {
	file_service_holder_proto_rawDescOnce.Do(func() {
		file_service_holder_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_holder_proto_rawDescData)
	})
	return file_service_holder_proto_rawDescData
}

var file_service_holder_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_service_holder_proto_goTypes = []interface{}{
	(*ListHolderNftTokenRequest)(nil),     // 0: tak1827.lightnftindexer.service.ListHolderNftTokenRequest
	(*ListHolderNftTokenResponse)(nil),    // 1: tak1827.lightnftindexer.service.ListHolderNftTokenResponse
	(*ListHolderAllNftTokenRequest)(nil),  // 2: tak1827.lightnftindexer.service.ListHolderAllNftTokenRequest
	(*ListHolderAllNftTokenResponse)(nil), // 3: tak1827.lightnftindexer.service.ListHolderAllNftTokenResponse
	(*ContractWithToken)(nil),             // 4: tak1827.lightnftindexer.service.ContractWithToken
	(*data.NFTContract)(nil),              // 5: tak1827.lightnftindexer.data.NFTContract
	(*TokenMini)(nil),                     // 6: tak1827.lightnftindexer.service.TokenMini
}
var file_service_holder_proto_depIdxs = []int32{
	5, // 0: tak1827.lightnftindexer.service.ListHolderNftTokenResponse.nft_contract:type_name -> tak1827.lightnftindexer.data.NFTContract
	6, // 1: tak1827.lightnftindexer.service.ListHolderNftTokenResponse.tokens:type_name -> tak1827.lightnftindexer.service.TokenMini
	4, // 2: tak1827.lightnftindexer.service.ListHolderAllNftTokenResponse.nft_contracts:type_name -> tak1827.lightnftindexer.service.ContractWithToken
	5, // 3: tak1827.lightnftindexer.service.ContractWithToken.nft_contract:type_name -> tak1827.lightnftindexer.data.NFTContract
	6, // 4: tak1827.lightnftindexer.service.ContractWithToken.tokens:type_name -> tak1827.lightnftindexer.service.TokenMini
	0, // 5: tak1827.lightnftindexer.service.Holder.ListHolderNftToken:input_type -> tak1827.lightnftindexer.service.ListHolderNftTokenRequest
	2, // 6: tak1827.lightnftindexer.service.Holder.ListHolderAllNftToken:input_type -> tak1827.lightnftindexer.service.ListHolderAllNftTokenRequest
	1, // 7: tak1827.lightnftindexer.service.Holder.ListHolderNftToken:output_type -> tak1827.lightnftindexer.service.ListHolderNftTokenResponse
	3, // 8: tak1827.lightnftindexer.service.Holder.ListHolderAllNftToken:output_type -> tak1827.lightnftindexer.service.ListHolderAllNftTokenResponse
	7, // [7:9] is the sub-list for method output_type
	5, // [5:7] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_service_holder_proto_init() }
func file_service_holder_proto_init() {
	if File_service_holder_proto != nil {
		return
	}
	file_service_nft_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_holder_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHolderNftTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_holder_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHolderNftTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_holder_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHolderAllNftTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_holder_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHolderAllNftTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_holder_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractWithToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_holder_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_holder_proto_goTypes,
		DependencyIndexes: file_service_holder_proto_depIdxs,
		MessageInfos:      file_service_holder_proto_msgTypes,
	}.Build()
	File_service_holder_proto = out.File
	file_service_holder_proto_rawDesc = nil
	file_service_holder_proto_goTypes = nil
	file_service_holder_proto_depIdxs = nil
}
