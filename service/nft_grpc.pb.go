// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: service/nft.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NftClient is the client API for Nft service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NftClient interface {
	GetNftContract(ctx context.Context, in *GetNftContractRequest, opts ...grpc.CallOption) (*GetNftContractResponse, error)
	ListAllNftContract(ctx context.Context, in *ListAllNftContractRequest, opts ...grpc.CallOption) (*ListAllNftContractResponse, error)
	GetNftToken(ctx context.Context, in *GetNftTokenRequest, opts ...grpc.CallOption) (*GetNftTokenResponse, error)
	ListAllNftToken(ctx context.Context, in *ListAllNftTokenRequest, opts ...grpc.CallOption) (*ListAllNftTokenResponse, error)
}

type nftClient struct {
	cc grpc.ClientConnInterface
}

func NewNftClient(cc grpc.ClientConnInterface) NftClient {
	return &nftClient{cc}
}

func (c *nftClient) GetNftContract(ctx context.Context, in *GetNftContractRequest, opts ...grpc.CallOption) (*GetNftContractResponse, error) {
	out := new(GetNftContractResponse)
	err := c.cc.Invoke(ctx, "/tak1827.lightnftindexer.service.Nft/GetNftContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nftClient) ListAllNftContract(ctx context.Context, in *ListAllNftContractRequest, opts ...grpc.CallOption) (*ListAllNftContractResponse, error) {
	out := new(ListAllNftContractResponse)
	err := c.cc.Invoke(ctx, "/tak1827.lightnftindexer.service.Nft/ListAllNftContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nftClient) GetNftToken(ctx context.Context, in *GetNftTokenRequest, opts ...grpc.CallOption) (*GetNftTokenResponse, error) {
	out := new(GetNftTokenResponse)
	err := c.cc.Invoke(ctx, "/tak1827.lightnftindexer.service.Nft/GetNftToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nftClient) ListAllNftToken(ctx context.Context, in *ListAllNftTokenRequest, opts ...grpc.CallOption) (*ListAllNftTokenResponse, error) {
	out := new(ListAllNftTokenResponse)
	err := c.cc.Invoke(ctx, "/tak1827.lightnftindexer.service.Nft/ListAllNftToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NftServer is the server API for Nft service.
// All implementations should embed UnimplementedNftServer
// for forward compatibility
type NftServer interface {
	GetNftContract(context.Context, *GetNftContractRequest) (*GetNftContractResponse, error)
	ListAllNftContract(context.Context, *ListAllNftContractRequest) (*ListAllNftContractResponse, error)
	GetNftToken(context.Context, *GetNftTokenRequest) (*GetNftTokenResponse, error)
	ListAllNftToken(context.Context, *ListAllNftTokenRequest) (*ListAllNftTokenResponse, error)
}

// UnimplementedNftServer should be embedded to have forward compatible implementations.
type UnimplementedNftServer struct {
}

func (UnimplementedNftServer) GetNftContract(context.Context, *GetNftContractRequest) (*GetNftContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNftContract not implemented")
}
func (UnimplementedNftServer) ListAllNftContract(context.Context, *ListAllNftContractRequest) (*ListAllNftContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllNftContract not implemented")
}
func (UnimplementedNftServer) GetNftToken(context.Context, *GetNftTokenRequest) (*GetNftTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNftToken not implemented")
}
func (UnimplementedNftServer) ListAllNftToken(context.Context, *ListAllNftTokenRequest) (*ListAllNftTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllNftToken not implemented")
}

// UnsafeNftServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NftServer will
// result in compilation errors.
type UnsafeNftServer interface {
	mustEmbedUnimplementedNftServer()
}

func RegisterNftServer(s grpc.ServiceRegistrar, srv NftServer) {
	s.RegisterService(&Nft_ServiceDesc, srv)
}

func _Nft_GetNftContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNftContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NftServer).GetNftContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tak1827.lightnftindexer.service.Nft/GetNftContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NftServer).GetNftContract(ctx, req.(*GetNftContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nft_ListAllNftContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllNftContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NftServer).ListAllNftContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tak1827.lightnftindexer.service.Nft/ListAllNftContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NftServer).ListAllNftContract(ctx, req.(*ListAllNftContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nft_GetNftToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNftTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NftServer).GetNftToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tak1827.lightnftindexer.service.Nft/GetNftToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NftServer).GetNftToken(ctx, req.(*GetNftTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nft_ListAllNftToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllNftTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NftServer).ListAllNftToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tak1827.lightnftindexer.service.Nft/ListAllNftToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NftServer).ListAllNftToken(ctx, req.(*ListAllNftTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Nft_ServiceDesc is the grpc.ServiceDesc for Nft service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Nft_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tak1827.lightnftindexer.service.Nft",
	HandlerType: (*NftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNftContract",
			Handler:    _Nft_GetNftContract_Handler,
		},
		{
			MethodName: "ListAllNftContract",
			Handler:    _Nft_ListAllNftContract_Handler,
		},
		{
			MethodName: "GetNftToken",
			Handler:    _Nft_GetNftToken_Handler,
		},
		{
			MethodName: "ListAllNftToken",
			Handler:    _Nft_ListAllNftToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/nft.proto",
}
