// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.1
// source: service/nft.proto

package service

import (
	data "github.com/tak1827/light-nft-indexer/data"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetNftContractRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (x *GetNftContractRequest) Reset() {
	*x = GetNftContractRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_nft_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNftContractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNftContractRequest) ProtoMessage() {}

func (x *GetNftContractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_nft_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNftContractRequest.ProtoReflect.Descriptor instead.
func (*GetNftContractRequest) Descriptor() ([]byte, []int) {
	return file_service_nft_proto_rawDescGZIP(), []int{0}
}

func (x *GetNftContractRequest) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

type GetNftContractResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nft *data.NFTContract `protobuf:"bytes,1,opt,name=nft,proto3" json:"nft,omitempty"`
}

func (x *GetNftContractResponse) Reset() {
	*x = GetNftContractResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_nft_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNftContractResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNftContractResponse) ProtoMessage() {}

func (x *GetNftContractResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_nft_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNftContractResponse.ProtoReflect.Descriptor instead.
func (*GetNftContractResponse) Descriptor() ([]byte, []int) {
	return file_service_nft_proto_rawDescGZIP(), []int{1}
}

func (x *GetNftContractResponse) GetNft() *data.NFTContract {
	if x != nil {
		return x.Nft
	}
	return nil
}

type ListAllNftContractRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListAllNftContractRequest) Reset() {
	*x = ListAllNftContractRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_nft_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAllNftContractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAllNftContractRequest) ProtoMessage() {}

func (x *ListAllNftContractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_nft_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAllNftContractRequest.ProtoReflect.Descriptor instead.
func (*ListAllNftContractRequest) Descriptor() ([]byte, []int) {
	return file_service_nft_proto_rawDescGZIP(), []int{2}
}

type ListAllNftContractResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nfts []*data.NFTContract `protobuf:"bytes,1,rep,name=nfts,proto3" json:"nfts,omitempty"`
}

func (x *ListAllNftContractResponse) Reset() {
	*x = ListAllNftContractResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_nft_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAllNftContractResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAllNftContractResponse) ProtoMessage() {}

func (x *ListAllNftContractResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_nft_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAllNftContractResponse.ProtoReflect.Descriptor instead.
func (*ListAllNftContractResponse) Descriptor() ([]byte, []int) {
	return file_service_nft_proto_rawDescGZIP(), []int{3}
}

func (x *ListAllNftContractResponse) GetNfts() []*data.NFTContract {
	if x != nil {
		return x.Nfts
	}
	return nil
}

type GetNftTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	TokenId         string `protobuf:"bytes,2,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
}

func (x *GetNftTokenRequest) Reset() {
	*x = GetNftTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_nft_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNftTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNftTokenRequest) ProtoMessage() {}

func (x *GetNftTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_nft_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNftTokenRequest.ProtoReflect.Descriptor instead.
func (*GetNftTokenRequest) Descriptor() ([]byte, []int) {
	return file_service_nft_proto_rawDescGZIP(), []int{4}
}

func (x *GetNftTokenRequest) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *GetNftTokenRequest) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

type GetNftTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token             *data.Token             `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	TransferHistories []*data.TransferHistory `protobuf:"bytes,2,rep,name=transfer_histories,json=transferHistories,proto3" json:"transfer_histories,omitempty"`
}

func (x *GetNftTokenResponse) Reset() {
	*x = GetNftTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_nft_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNftTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNftTokenResponse) ProtoMessage() {}

func (x *GetNftTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_nft_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNftTokenResponse.ProtoReflect.Descriptor instead.
func (*GetNftTokenResponse) Descriptor() ([]byte, []int) {
	return file_service_nft_proto_rawDescGZIP(), []int{5}
}

func (x *GetNftTokenResponse) GetToken() *data.Token {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *GetNftTokenResponse) GetTransferHistories() []*data.TransferHistory {
	if x != nil {
		return x.TransferHistories
	}
	return nil
}

type ListAllNftTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (x *ListAllNftTokenRequest) Reset() {
	*x = ListAllNftTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_nft_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAllNftTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAllNftTokenRequest) ProtoMessage() {}

func (x *ListAllNftTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_nft_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAllNftTokenRequest.ProtoReflect.Descriptor instead.
func (*ListAllNftTokenRequest) Descriptor() ([]byte, []int) {
	return file_service_nft_proto_rawDescGZIP(), []int{6}
}

func (x *ListAllNftTokenRequest) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

type TokenMini struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId string          `protobuf:"bytes,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	Owner   string          `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Meta    *data.TokenMeta `protobuf:"bytes,3,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *TokenMini) Reset() {
	*x = TokenMini{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_nft_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenMini) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenMini) ProtoMessage() {}

func (x *TokenMini) ProtoReflect() protoreflect.Message {
	mi := &file_service_nft_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenMini.ProtoReflect.Descriptor instead.
func (*TokenMini) Descriptor() ([]byte, []int) {
	return file_service_nft_proto_rawDescGZIP(), []int{7}
}

func (x *TokenMini) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *TokenMini) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *TokenMini) GetMeta() *data.TokenMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type ListAllNftTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tokens []*TokenMini `protobuf:"bytes,1,rep,name=tokens,proto3" json:"tokens,omitempty"`
}

func (x *ListAllNftTokenResponse) Reset() {
	*x = ListAllNftTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_nft_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAllNftTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAllNftTokenResponse) ProtoMessage() {}

func (x *ListAllNftTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_nft_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAllNftTokenResponse.ProtoReflect.Descriptor instead.
func (*ListAllNftTokenResponse) Descriptor() ([]byte, []int) {
	return file_service_nft_proto_rawDescGZIP(), []int{8}
}

func (x *ListAllNftTokenResponse) GetTokens() []*TokenMini {
	if x != nil {
		return x.Tokens
	}
	return nil
}

var File_service_nft_proto protoreflect.FileDescriptor

var file_service_nft_proto_rawDesc = []byte{
	0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6e, 0x66, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x74, 0x61, 0x6b, 0x31, 0x38, 0x32, 0x37, 0x2e, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x6e, 0x66, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x6e, 0x66, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x42, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4e, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x55, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4e, 0x66, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3b, 0x0a, 0x03, 0x6e, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x74, 0x61, 0x6b, 0x31, 0x38, 0x32, 0x37, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x66, 0x74,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4e, 0x46, 0x54,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x03, 0x6e, 0x66, 0x74, 0x22, 0x1b, 0x0a,
	0x19, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x4e, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5b, 0x0a, 0x1a, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x6c, 0x6c, 0x4e, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x6e, 0x66, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x61, 0x6b, 0x31, 0x38, 0x32, 0x37,
	0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x66, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4e, 0x46, 0x54, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x52, 0x04, 0x6e, 0x66, 0x74, 0x73, 0x22, 0x5a, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4e, 0x66,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x64, 0x22, 0xae, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4e, 0x66, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x61, 0x6b,
	0x31, 0x38, 0x32, 0x37, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x66, 0x74, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x5c, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x61, 0x6b, 0x31, 0x38, 0x32, 0x37, 0x2e, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x6e, 0x66, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x22, 0x43, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x4e,
	0x66, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29,
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x79, 0x0a, 0x09, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x4d, 0x69, 0x6e, 0x69, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x61, 0x6b, 0x31, 0x38, 0x32, 0x37, 0x2e,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x66, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x22, 0x5d, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x4e,
	0x66, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x42, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x74, 0x61, 0x6b, 0x31, 0x38, 0x32, 0x37, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e,
	0x66, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x69, 0x6e, 0x69, 0x52, 0x06, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x32, 0xaf, 0x05, 0x0a, 0x03, 0x4e, 0x66, 0x74, 0x12, 0xa5, 0x01, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x4e, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x36,
	0x2e, 0x74, 0x61, 0x6b, 0x31, 0x38, 0x32, 0x37, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x66,
	0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x4e, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x74, 0x61, 0x6b, 0x31, 0x38, 0x32, 0x37,
	0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x66, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x66, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x66, 0x74,
	0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x7d, 0x12, 0x9e, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x4e,
	0x66, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x3a, 0x2e, 0x74, 0x61, 0x6b,
	0x31, 0x38, 0x32, 0x37, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x66, 0x74, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x6c, 0x6c, 0x4e, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x74, 0x61, 0x6b, 0x31, 0x38, 0x32, 0x37,
	0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x66, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c,
	0x4e, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x0f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x2f, 0x76, 0x31,
	0x2f, 0x6e, 0x66, 0x74, 0x12, 0xad, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4e, 0x66, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x33, 0x2e, 0x74, 0x61, 0x6b, 0x31, 0x38, 0x32, 0x37, 0x2e, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x6e, 0x66, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x66, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x74, 0x61, 0x6b, 0x31,
	0x38, 0x32, 0x37, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x66, 0x74, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4e,
	0x66, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x66, 0x74,
	0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x7d, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x7b, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x69, 0x64, 0x7d, 0x12, 0xae, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c,
	0x4e, 0x66, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x37, 0x2e, 0x74, 0x61, 0x6b, 0x31, 0x38,
	0x32, 0x37, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x66, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x6c, 0x6c, 0x4e, 0x66, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x38, 0x2e, 0x74, 0x61, 0x6b, 0x31, 0x38, 0x32, 0x37, 0x2e, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x6e, 0x66, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x4e, 0x66, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x66, 0x74, 0x2f, 0x7b, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x7d, 0x2f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x61, 0x6b, 0x31, 0x38, 0x32, 0x37, 0x2f, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x2d, 0x6e, 0x66, 0x74, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_nft_proto_rawDescOnce sync.Once
	file_service_nft_proto_rawDescData = file_service_nft_proto_rawDesc
)

func file_service_nft_proto_rawDescGZIP() []byte {
	file_service_nft_proto_rawDescOnce.Do(func() {
		file_service_nft_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_nft_proto_rawDescData)
	})
	return file_service_nft_proto_rawDescData
}

var file_service_nft_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_service_nft_proto_goTypes = []interface{}{
	(*GetNftContractRequest)(nil),      // 0: tak1827.lightnftindexer.service.GetNftContractRequest
	(*GetNftContractResponse)(nil),     // 1: tak1827.lightnftindexer.service.GetNftContractResponse
	(*ListAllNftContractRequest)(nil),  // 2: tak1827.lightnftindexer.service.ListAllNftContractRequest
	(*ListAllNftContractResponse)(nil), // 3: tak1827.lightnftindexer.service.ListAllNftContractResponse
	(*GetNftTokenRequest)(nil),         // 4: tak1827.lightnftindexer.service.GetNftTokenRequest
	(*GetNftTokenResponse)(nil),        // 5: tak1827.lightnftindexer.service.GetNftTokenResponse
	(*ListAllNftTokenRequest)(nil),     // 6: tak1827.lightnftindexer.service.ListAllNftTokenRequest
	(*TokenMini)(nil),                  // 7: tak1827.lightnftindexer.service.TokenMini
	(*ListAllNftTokenResponse)(nil),    // 8: tak1827.lightnftindexer.service.ListAllNftTokenResponse
	(*data.NFTContract)(nil),           // 9: tak1827.lightnftindexer.data.NFTContract
	(*data.Token)(nil),                 // 10: tak1827.lightnftindexer.data.Token
	(*data.TransferHistory)(nil),       // 11: tak1827.lightnftindexer.data.TransferHistory
	(*data.TokenMeta)(nil),             // 12: tak1827.lightnftindexer.data.TokenMeta
}
var file_service_nft_proto_depIdxs = []int32{
	9,  // 0: tak1827.lightnftindexer.service.GetNftContractResponse.nft:type_name -> tak1827.lightnftindexer.data.NFTContract
	9,  // 1: tak1827.lightnftindexer.service.ListAllNftContractResponse.nfts:type_name -> tak1827.lightnftindexer.data.NFTContract
	10, // 2: tak1827.lightnftindexer.service.GetNftTokenResponse.token:type_name -> tak1827.lightnftindexer.data.Token
	11, // 3: tak1827.lightnftindexer.service.GetNftTokenResponse.transfer_histories:type_name -> tak1827.lightnftindexer.data.TransferHistory
	12, // 4: tak1827.lightnftindexer.service.TokenMini.meta:type_name -> tak1827.lightnftindexer.data.TokenMeta
	7,  // 5: tak1827.lightnftindexer.service.ListAllNftTokenResponse.tokens:type_name -> tak1827.lightnftindexer.service.TokenMini
	0,  // 6: tak1827.lightnftindexer.service.Nft.GetNftContract:input_type -> tak1827.lightnftindexer.service.GetNftContractRequest
	2,  // 7: tak1827.lightnftindexer.service.Nft.ListAllNftContract:input_type -> tak1827.lightnftindexer.service.ListAllNftContractRequest
	4,  // 8: tak1827.lightnftindexer.service.Nft.GetNftToken:input_type -> tak1827.lightnftindexer.service.GetNftTokenRequest
	6,  // 9: tak1827.lightnftindexer.service.Nft.ListAllNftToken:input_type -> tak1827.lightnftindexer.service.ListAllNftTokenRequest
	1,  // 10: tak1827.lightnftindexer.service.Nft.GetNftContract:output_type -> tak1827.lightnftindexer.service.GetNftContractResponse
	3,  // 11: tak1827.lightnftindexer.service.Nft.ListAllNftContract:output_type -> tak1827.lightnftindexer.service.ListAllNftContractResponse
	5,  // 12: tak1827.lightnftindexer.service.Nft.GetNftToken:output_type -> tak1827.lightnftindexer.service.GetNftTokenResponse
	8,  // 13: tak1827.lightnftindexer.service.Nft.ListAllNftToken:output_type -> tak1827.lightnftindexer.service.ListAllNftTokenResponse
	10, // [10:14] is the sub-list for method output_type
	6,  // [6:10] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_service_nft_proto_init() }
func file_service_nft_proto_init() {
	if File_service_nft_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_service_nft_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNftContractRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_nft_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNftContractResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_nft_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAllNftContractRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_nft_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAllNftContractResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_nft_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNftTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_nft_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNftTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_nft_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAllNftTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_nft_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenMini); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_nft_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAllNftTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_nft_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_nft_proto_goTypes,
		DependencyIndexes: file_service_nft_proto_depIdxs,
		MessageInfos:      file_service_nft_proto_msgTypes,
	}.Build()
	File_service_nft_proto = out.File
	file_service_nft_proto_rawDesc = nil
	file_service_nft_proto_goTypes = nil
	file_service_nft_proto_depIdxs = nil
}
